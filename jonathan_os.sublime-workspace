{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"csr",
				"csr_y"
			],
			[
				"cmd",
				"cmd_history_scroll_up"
			],
			[
				"text",
				"textmemptr"
			],
			[
				"tem",
				"textmemptr"
			],
			[
				"cm",
				"cmd_history_scroll_down"
			],
			[
				"len",
				"length_to_copy"
			],
			[
				"le",
				"length_to_move"
			],
			[
				"mem",
				"memsetw"
			],
			[
				"las",
				"last_writable"
			],
			[
				"cs",
				"csr_y"
			],
			[
				"VG",
				"VGA_WIDTH"
			],
			[
				"time_i",
				"time_since_boot"
			],
			[
				"sc",
				"screen_data"
			],
			[
				"scre",
				"screen_data"
			],
			[
				"screen_",
				"screen_index"
			],
			[
				"V",
				"VGA_WIDTH"
			],
			[
				"test",
				"testptr"
			],
			[
				"te",
				"textmemptr"
			],
			[
				"b",
				"buffer"
			],
			[
				"edit",
				"edit_get_text"
			],
			[
				"comma",
				"command_list"
			],
			[
				"comm",
				"command_list"
			],
			[
				"MAX",
				"MAX_CMD_DESC_LENGTH"
			],
			[
				"VGA",
				"VGA_WIDTH"
			],
			[
				"str",
				"strcpy"
			],
			[
				"histo",
				"history_index"
			],
			[
				"CMD",
				"CMD_HISTORY_LENGTH-1"
			],
			[
				"his",
				"history_index"
			],
			[
				"exit",
				"exit_terminal"
			],
			[
				"com",
				"command_parser"
			],
			[
				"co",
				"command"
			],
			[
				"si",
				"sizeof"
			],
			[
				"_",
				"__volatile__"
			],
			[
				"___",
				"__asm__"
			],
			[
				"editor",
				"editor_buffer"
			],
			[
				"edi",
				"edit_get_text"
			],
			[
				"ed",
				"editor_buffer"
			],
			[
				"e",
				"edit_get_text"
			],
			[
				"ke",
				"keyboard_install"
			],
			[
				"keyb",
				"keyboard_uninstall"
			],
			[
				"raw",
				"raw_index"
			],
			[
				"des",
				"dest_index"
			],
			[
				"con",
				"consecutive_backspaces"
			],
			[
				"wr",
				"writable_index"
			],
			[
				"wri",
				"writable_index"
			],
			[
				"ser",
				"serial_putch"
			],
			[
				"ca",
				"cannot_write"
			],
			[
				"kd",
				"kbdus"
			],
			[
				"is",
				"isalpha"
			],
			[
				"cap",
				"caps_lock_on"
			],
			[
				"shift",
				"shift_pressed"
			],
			[
				"kb",
				"kbdus"
			],
			[
				"temp",
				"temp_count"
			],
			[
				"shif",
				"shift_pressed"
			],
			[
				"c",
				"current"
			],
			[
				"key",
				"keyboard_handler"
			],
			[
				"timer",
				"timer_handler"
			],
			[
				"seri",
				"serial_text"
			],
			[
				"move",
				"move_csr"
			],
			[
				"fb",
				"fb_write_cell"
			],
			[
				"set",
				"settextcolor"
			],
			[
				"has",
				"has_bully_varying"
			],
			[
				"train",
				"train_set"
			],
			[
				"xml",
				"xml_escape_parser"
			],
			[
				"p",
				"num_partitions"
			],
			[
				"par",
				"partition_size"
			],
			[
				"num",
				"num_partitions"
			],
			[
				"sax",
				"saxutils"
			],
			[
				"a",
				"accuracy"
			],
			[
				"la",
				"labeled_features"
			],
			[
				"f",
				"featureset"
			],
			[
				"lab",
				"labeled_features"
			],
			[
				"l",
				"labeled_features"
			],
			[
				"tes",
				"testdict"
			],
			[
				"cl",
				"classifier"
			],
			[
				"vocab",
				"vocabulary"
			],
			[
				"fe",
				"features"
			],
			[
				"mes",
				"message_features"
			],
			[
				"doc",
				"documents"
			],
			[
				"do",
				"document_features"
			],
			[
				"label",
				"labeled_messages"
			],
			[
				"tr",
				"train_set"
			],
			[
				"featu",
				"feature_set"
			],
			[
				"JFr",
				"JFrameWithComponents"
			],
			[
				"the",
				"theHeight"
			],
			[
				"nu",
				"theNumRaces"
			],
			[
				"parse",
				"parsexml"
			],
			[
				"bully",
				"bully_result"
			],
			[
				"find",
				"findall"
			],
			[
				"re",
				"remove"
			],
			[
				"print",
				"print_worker"
			],
			[
				"fin",
				"findMin"
			],
			[
				"findM",
				"findMin_worker"
			],
			[
				"d",
				"duplicates"
			],
			[
				"size",
				"theSize"
			],
			[
				"F",
				"Firefighter"
			],
			[
				"Para",
				"ParamedicIncident"
			],
			[
				"Cop",
				"CopIncident"
			],
			[
				"C",
				"RescueCat"
			],
			[
				"Inc",
				"Incident"
			],
			[
				"Fire",
				"FirefighterIncident"
			],
			[
				"s",
				"success"
			],
			[
				"fire",
				"firefighter"
			],
			[
				"In",
				"Incident"
			],
			[
				"in",
				"incident"
			],
			[
				"num_",
				"num_confronts"
			],
			[
				"suc",
				"successRatio"
			],
			[
				"conf",
				"confront"
			],
			[
				"new",
				"newCapacity"
			],
			[
				"de",
				"denominator"
			],
			[
				"n",
				"numerator"
			],
			[
				"doub",
				"doublePrecision"
			],
			[
				"get",
				"getRadicandValue"
			],
			[
				"ori",
				"origIndex"
			],
			[
				"newt",
				"newtonRootIter"
			],
			[
				"int",
				"initGuess"
			],
			[
				"i",
				"index"
			],
			[
				"orig",
				"origRadicand"
			],
			[
				"nth",
				"nthRootNewtonDiff"
			],
			[
				"ro",
				"rootNewtonDiff"
			],
			[
				"subPr",
				"subPrivate"
			],
			[
				"sub",
				"subProtected"
			],
			[
				"prote",
				"protectedString"
			],
			[
				"pri",
				"privateString"
			],
			[
				"Pro",
				"protectedString"
			],
			[
				"pro",
				"protectedString"
			],
			[
				"public",
				"publicString"
			],
			[
				"pub",
				"publicString"
			]
		]
	},
	"buffers":
	[
		{
			"file": "Makefile",
			"settings":
			{
				"buffer_size": 937,
				"line_ending": "Unix"
			}
		},
		{
			"file": "loader.s",
			"settings":
			{
				"buffer_size": 8677,
				"line_ending": "Unix"
			}
		},
		{
			"file": "kmain.c",
			"settings":
			{
				"buffer_size": 600,
				"line_ending": "Unix"
			}
		},
		{
			"file": "terminal.c",
			"settings":
			{
				"buffer_size": 10079,
				"line_ending": "Unix"
			}
		},
		{
			"file": "edit.c",
			"settings":
			{
				"buffer_size": 598,
				"line_ending": "Unix"
			}
		},
		{
			"file": "utilities.c",
			"settings":
			{
				"buffer_size": 4029,
				"line_ending": "Unix"
			}
		},
		{
			"file": "timer.c",
			"settings":
			{
				"buffer_size": 1729,
				"line_ending": "Unix",
				"name": "#include < system.h >"
			}
		},
		{
			"file": "gdt.c",
			"settings":
			{
				"buffer_size": 2700,
				"line_ending": "Unix",
				"name": "/* Defines a GDT entry. We say packed, because it"
			}
		},
		{
			"file": "irq.c",
			"settings":
			{
				"buffer_size": 3919,
				"line_ending": "Unix"
			}
		},
		{
			"file": "isrs.c",
			"settings":
			{
				"buffer_size": 4653,
				"line_ending": "Unix",
				"name": "#include \"system.h\""
			}
		},
		{
			"file": "serial.c",
			"settings":
			{
				"buffer_size": 2829,
				"line_ending": "Unix"
			}
		},
		{
			"file": "system.c",
			"settings":
			{
				"buffer_size": 564,
				"line_ending": "Unix"
			}
		},
		{
			"file": "system.h",
			"settings":
			{
				"buffer_size": 4516,
				"line_ending": "Unix",
				"name": "#ifndef __SYSTEM_H"
			}
		},
		{
			"file": "scrn.c",
			"settings":
			{
				"buffer_size": 10101,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "#include \"system.h\"\n\n/* keyboard_us means US Keyboard Layout. This is a scancode table\n*  used to layout a standard US keyboard. I have left some\n*  comments in to give you an idea of what key is what, even\n*  though I set it's array index to 0. You can change that to\n*  whatever you want using a macro, if you wish! */\n\nchar current = 0;\nint left_shift_pressed = 0;\nint right_shift_pressed = 0;\nint caps_lock_on = 0;\n\nint cmd_history_scroll_up = 0;\nint cmd_history_scroll_down = 0;\n\nextern last_writable;\nextern furthest_writable;\nextern csr_x;\nextern csr_y;\n\nunsigned char keyboard_us[128] =\n{\n    0,  27, '1', '2', '3', '4', '5', '6', '7', '8',	/* 9 */\n  '9', '0', '-', '=', '\\b',	/* Backspace */\n  '\\t',			/* Tab */\n  'q', 'w', 'e', 'r',	/* 19 */\n  't', 'y', 'u', 'i', 'o', 'p', '[', ']', '\\n',	/* Enter key */\n    0,			/* 29   - Control */\n  'a', 's', 'd', 'f', 'g', 'h', 'j', 'k', 'l', ';',	/* 39 */\n '\\'', '`',   0,		/* Left shift */\n '\\\\', 'z', 'x', 'c', 'v', 'b', 'n',			/* 49 */\n  'm', ',', '.', '/',   0,				/* Right shift */\n  '*',\n    0,	/* Alt */\n  ' ',	/* Space bar */\n    0,	/* Caps lock */\n    0,	/* 59 - F1 key ... > */\n    0,   0,   0,   0,   0,   0,   0,   0,\n    0,	/* < ... F10 */\n    0,	/* 69 - Num lock*/\n    0,	/* Scroll Lock */\n    0,	/* Home key */\n    0x60,	/* Up Arrow */\n    0,	/* Page Up */\n  '-',\n    0,	/* Left Arrow */\n    0,\n    0,	/* Right Arrow */\n  '+',\n    0,	/* 79 - End key*/\n    0,	/* Down Arrow */\n    0,	/* Page Down */\n    0,	/* Insert Key */\n    0,	/* Delete Key */\n    0,   0,   0,\n    0,	/* F11 Key */\n    0,	/* F12 Key */\n    0,	/* All other keys are undefined */\n};		\n\nunsigned char keyboard_us_shifted[128] =\n{\n    0,  27, '!', '@', '#', '$', '%', '^', '&', '*', /* 9 */\n  '(', ')', '-', '=', '\\b', /* Backspace */\n  '\\t',         /* Tab */\n  'Q', 'W', 'E', 'R',   /* 19 */\n  'T', 'Y', 'U', 'I', 'O', 'P', '{', '}', '\\n', /* Enter key */\n    0,          /* 29   - Control */\n  'A', 'S', 'D', 'F', 'G', 'H', 'J', 'K', 'L', ':', /* 39 */\n '\\\"', '~',   0,        /* Left shift */\n '|', 'Z', 'X', 'C', 'V', 'B', 'N',            /* 49 */\n  'M', '<', '>', '?',   0,              /* Right shift */\n  '*',\n    0,  /* Alt */\n  ' ',  /* Space bar */\n    0,  /* Caps lock */\n    0,  /* 59 - F1 key ... > */\n    0,   0,   0,   0,   0,   0,   0,   0,\n    0,  /* < ... F10 */\n    0,  /* 69 - Num lock*/\n    0,  /* Scroll Lock */\n    0,  /* Home key */\n    0,  /* Up Arrow */\n    0,  /* Page Up */\n  '-',\n    0,  /* Left Arrow */\n    0,\n    0,  /* Right Arrow */\n  '+',\n    0,  /* 79 - End key*/\n    0,  /* Down Arrow */\n    0,  /* Page Down */\n    0,  /* Insert Key */\n    0,  /* Delete Key */\n    0,   0,   0,\n    0,  /* F11 Key */\n    0,  /* F12 Key */\n    0,  /* All other keys are undefined */\n};  \n\n/* Handles the keyboard interrupt */\nvoid keyboard_handler(struct regs *r)\n// void keyboard_handler()\n{\n    unsigned char scancode;\n\n    /* Read from the keyboard's data buffer */\n    scancode = inportb(0x60);\n\n    /* If the top bit of the byte we read from the keyboard is\n    *  set, that means that a key has just been released */\n    if (scancode & 0x80)\n    {\n        /* You can use this one to see if the user released the\n        *  shift, alt, or control keys... */\n\n        \n        /* SCANCODE FOR RELEASING LEFT SHIFT */\n        if(scancode == 170) {\n            left_shift_pressed = 0;\n        }\n        /* SCANCODE FOR RELEASING RIGHT SHIFT */\n        if(scancode == 182) {\n            right_shift_pressed = 0;\n        }\n\n\n    } \n    else\n    {\n        /* Here, a key was just pressed. Please note that if you\n        *  hold a key down, you will get repeated key press\n        *  interrupts. */\n\n        /* Just to show you how this works, we simply translate\n        *  the keyboard scancode into an ASCII value, and then\n        *  display it to the screen. You can get creative and\n        *  use some flags to see if a shift is pressed and use a\n        *  different layout, or you can add another 128 entries\n        *  to the above layout to correspond to 'shift' being\n        *  held. If shift is held using the larger lookup table,\n        *  you would add 128 to the scancode when you look for it */\n\n        // putint(scancode);\n        // putch('\\n');\n\n        /* SCANCODE FOR PRESSING LEFT SHIFT */\n        if(scancode == 42) {\n            left_shift_pressed = 1;\n        }\n\n        /* SCANCODE FOR PRESSING RIGHT SHIFT */\n        if(scancode == 54) {\n            right_shift_pressed = 1;\n        }\n\n        /* SCANCODE FOR PRESSING LEFT ARROW */\n        if((csr_y * 80 + csr_x) > last_writable)\n            if(scancode == 75)\n                csr_x--;\n\n        /* SCANCODE FOR PRESSING RIGHT ARROW */\n        if((csr_y * 80 + csr_x) < furthest_writable)\n            if(scancode == 77)\n                csr_x++;\n\n\n        /* SCANCODE FOR PRESSING UP ARROW */\n        if(scancode == 72) {\n            cmd_history_scroll_up = 1;\n        }\n\n        /* SCANCODE FOR PRESSING DOWN ARROW */\n        if(scancode == 80) {\n            cmd_history_scroll_down = 1;\n        }\n\n\n\n        /* SCANCODES FOR PRESSING CAPS LOCK */\n        if(scancode == 58) {\n            // puts(\"User pressed caps lock!\\n\");\n            if(caps_lock_on) {\n                caps_lock_on = 0;\n                // puts(\"caps lock off\\n\");\n            }\n            else {\n                caps_lock_on = 1;\n                // puts(\"caps lock on\\n\");\n            }\n        }\n\n        // puts(\"A key was pressed\");\n\n        if(caps_lock_on) {\n            if(left_shift_pressed || right_shift_pressed)\n                if(isalpha(keyboard_us[scancode]))\n                    current = keyboard_us[scancode];\n                else\n                    current = keyboard_us_shifted[scancode];\n            else\n                if(isalpha(keyboard_us[scancode]))\n                    current = keyboard_us_shifted[scancode];\n                else\n                    current = keyboard_us[scancode];\n        } else {\n            if(left_shift_pressed || right_shift_pressed)\n                current = keyboard_us_shifted[scancode];\n            else\n                current = keyboard_us[scancode];\n        }\n\n        keyboard_putch(current);\n    }\n    // putch(keyboard_us[scancode]); \n    // puts(\"\\nRead a character!\");\n}\n\n/* Installs the keyboard handler into IRQ1 */\nvoid keyboard_install()\n{\n    irq_install_handler(1, keyboard_handler);\n}\n\nint getchar() {\n    char temp;\n\n    /* current is the last character entered by the keyboard and processed by keyboard_handler() */\n    while(current == 0)\n        ;\n\n    temp = current;\n    current = 0;\n\n    return temp;\n}\n\n/* Read characters into buffer until user presses '\\n' and return length. */\nint getline(char *buffer, int lim)\n{\n    int i=0;\n    while(i < (lim-1) && (buffer[i] = getchar()) != '\\n') {\n        if(buffer[i] == '\\b') {\n            if(i != 0) {\n                buffer[i-1] = '\\0';\n                buffer[i] = '\\0';\n                i = i-1;\n            }\n        } else {\n            i++;\n        }\n    }\n\n    buffer[i] = '\\0';\n\n    return i;\n}",
			"file": "kb.c",
			"file_size": 7028,
			"file_write_time": 1465177684000000,
			"settings":
			{
				"buffer_size": 7031,
				"line_ending": "Unix",
				"name": "/* KBDUS means US Keyboard Layout. This is a scanc"
			}
		},
		{
			"file": "link.ld",
			"settings":
			{
				"buffer_size": 352,
				"line_ending": "Unix",
				"name": "OUTPUT_FORMAT(\"binary\")"
			}
		},
		{
			"file": "idt.c",
			"settings":
			{
				"buffer_size": 2249,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"command_palette":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"console":
	{
		"height": 139.0
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/home/ctong/Desktop/Linux Programming/C/ReplaceString.c",
		"/home/ctong/Desktop/Linux Programming/C/Alphabetical.c",
		"/home/ctong/Desktop/Book OS/terminal.c",
		"/home/ctong/Desktop/Book OS/edit.c",
		"/home/ctong/Desktop/Book OS/system.c",
		"/home/ctong/Desktop/Book OS/idt.c",
		"/home/ctong/Desktop/Book OS/cmd.c",
		"/home/ctong/Desktop/Book OS/loader.s",
		"/home/ctong/.config/sublime-text-2/Packages/User/C.sublime-settings",
		"/home/ctong/Desktop/Book OS/bochslog.txt",
		"/home/ctong/Desktop/Book OS/Old Files/loader.s",
		"/home/ctong/Desktop/Book OS/irq.c",
		"/home/ctong/Desktop/Book OS/string.c",
		"/home/ctong/Desktop/Book OS/README.md",
		"/home/ctong/Desktop/Book OS/link_little.ld",
		"/home/ctong/Desktop/Book OS/loader_little.s",
		"/home/ctong/Desktop/Book OS/link.ld",
		"/home/ctong/Desktop/Book OS/loader2.s",
		"/home/ctong/Desktop/Book OS/idt.h",
		"/home/ctong/Desktop/Book OS/scrn.h",
		"/home/ctong/Desktop/Book OS/gdt.h",
		"/home/ctong/Desktop/Book OS/framebuffer.c",
		"/home/ctong/Desktop/Book OS/io.s",
		"/home/ctong/Desktop/Book OS/io.h",
		"/home/ctong/Desktop/Book OS/isrs.h",
		"/home/ctong/Desktop/Book OS/gdt.s",
		"/home/ctong/Desktop/Linux Programming/Python/message_feature_extractor_2yes.py",
		"/home/ctong/Desktop/Linux Programming/Python/classifier_bayes_cv.py",
		"/home/ctong/Desktop/Linux Programming/Python/message_feature_extractor_random_forest_pkl.py",
		"/home/ctong/Desktop/Linux Programming/Python/classifier_evaluation_metrics.py",
		"/home/ctong/Desktop/Book OS/kernel.elf",
		"/home/ctong/Desktop/Linux Programming/Python/message_feature_extractor_pkl.py",
		"/home/ctong/Desktop/Linux Programming/Python/approximate_integral.py",
		"/home/ctong/Desktop/Linux Programming/C/MyTerminal.c",
		"/home/ctong/Desktop/Linux Programming/Python/classifier_rforest.py",
		"/home/ctong/Desktop/Linux Programming/Python/smallxml.xml",
		"/home/ctong/Desktop/Linux Programming/Python/minixml.xml",
		"/home/ctong/Desktop/Linux Programming/Python/message_feature_extractor_random_forest.py",
		"/home/ctong/Desktop/Linux Programming/Python/parsexml.py",
		"/home/ctong/Desktop/Linux Programming/Python/smallxml.xml_parsed.txt",
		"/home/ctong/Desktop/Linux Programming/Python/smallxml_parsed.txt",
		"/home/ctong/Desktop/Linux Programming/Python/test2.py",
		"/home/ctong/Desktop/Linux Programming/Python/message_feature_extractor_cv.py",
		"/home/ctong/Desktop/Linux Programming/Python/message_feature_extractor.py",
		"/home/ctong/Desktop/Linux Programming/Python/label_bully.py",
		"/home/ctong/Desktop/Linux Programming/Python/sort_by_length.py",
		"/home/ctong/Desktop/Linux Programming/Python/sort_bully.py",
		"/home/ctong/Desktop/Linux Programming/Python/message_feature_extractor_random_forest_old.py",
		"/home/ctong/Desktop/Linux Programming/Python/Greetings.py",
		"/home/ctong/Desktop/Linux Programming/Python/Hello.py",
		"/home/ctong/Desktop/Linux Programming/Python/test.py",
		"/home/ctong/Desktop/Linux Programming/Python/NLTK/movie_reviews.py",
		"/home/ctong/Desktop/Linux Programming/Python/NLTK/pos_tagging.py",
		"/home/ctong/Desktop/Linux Programming/Java/JFrameTest.java",
		"/home/ctong/Desktop/Linux Programming/C++/Horse.cpp",
		"/home/ctong/Desktop/Linux Programming/C++/Candle.cpp",
		"/home/ctong/Desktop/Linux Programming/C++/Horses.cpp",
		"/home/ctong/Desktop/Linux Programming/Python/XMLMergedFile_PARSED.txt",
		"/home/ctong/Desktop/Linux Programming/Python/XMLMergedFile_PARSED_HAS_BULLY.txt",
		"/home/ctong/Desktop/Linux Programming/Python/country_data.xml",
		"/home/ctong/Desktop/Linux Programming/Python/XMLMergedFile2.xml",
		"/home/ctong/Desktop/Linux Programming/Python/HelloWorld.py",
		"/home/ctong/Desktop/Linux Programming/C++/PersistenceException.cpp",
		"/home/ctong/Desktop/Linux Programming/NLTK/find_ing.py",
		"/home/ctong/Desktop/Linux Programming/C++/MyArrayList.cpp",
		"/home/ctong/Desktop/Linux Programming/C++/Rational.cpp",
		"/home/ctong/Desktop/Linux Programming/C++/maxsubarray.cpp",
		"/home/ctong/Desktop/Linux Programming/C++/Vector.cpp",
		"/home/ctong/Desktop/Linux Programming/C++/mypow.cpp",
		"/home/ctong/Desktop/Linux Programming/C++/Polygon.cpp",
		"/home/ctong/Desktop/Linux Programming/C++/customnewtest.cpp",
		"/home/ctong/Desktop/Linux Programming/C++/voidptr.cpp",
		"/home/ctong/Desktop/Linux Programming/Java/ServiceWorkers/ServiceWorker.java",
		"/home/ctong/Desktop/Linux Programming/Java/ServiceWorkers/Firefighter.java",
		"/home/ctong/Desktop/Linux Programming/Java/ServiceWorkers/Incident.java",
		"/home/ctong/Desktop/Linux Programming/C++/test2",
		"/home/ctong/Desktop/Linux Programming/C++/BoxTest.cpp",
		"/home/ctong/Desktop/Linux Programming/C/voidptr.c",
		"/home/ctong/Desktop/Linux Programming/C++/TemplateVector.cpp",
		"/home/ctong/Desktop/Linux Programming/C++/TemplateVector.h",
		"/home/ctong/Desktop/Linux Programming/C++/MyLinkedList.cpp",
		"/home/ctong/Desktop/Linux Programming/C/test2.c",
		"/home/ctong/Desktop/Linux Programming/C++/ForEachDemo.cpp",
		"/home/ctong/Desktop/Linux Programming/Java/Java Midterm/Project2.java",
		"/home/ctong/Desktop/Linux Programming/Java/Java Midterm/Project1.java",
		"/home/ctong/Desktop/Linux Programming/Java/ServiceWorkers/Main.java",
		"/home/ctong/Desktop/Linux Programming/C/sqrt.c",
		"/home/ctong/Desktop/Infinity Academy/academy.css",
		"/home/ctong/Desktop/Linux Programming/C++/test.cpp",
		"/home/ctong/Desktop/Linux Programming/Java/Test.java",
		"/home/ctong/Desktop/Windows Desktop/Webpage Files/Infinity Academy/academy.html",
		"/home/ctong/Desktop/Windows Desktop/Webpage Files/Infinity Academy/academy.css",
		"/home/ctong/.themes/My-Radiance-Orange/gtk-3.0/gtk-widgets.css",
		"/home/ctong/Desktop/Linux Programming/C/MyLinkedList.c",
		"/home/ctong/.config/sublime-text-2/Packages/Default/Preferences.sublime-settings",
		"/home/ctong/.config/sublime-text-2/Packages/User/Preferences.sublime-settings",
		"/home/ctong/Desktop/Linux Programming/C++/.Countdown.cpp.swp",
		"/home/ctong/Desktop/Linux Programming/C++/polytest.cpp",
		"/home/ctong/Desktop/Linux Programming/C++/throwtest.cpp",
		"/home/ctong/Desktop/Linux Programming/C++/test2.cpp",
		"/home/ctong/Desktop/Linux Programming/C++/PolyDiff.cpp",
		"/home/ctong/Desktop/Linux Programming/FORTRAN/hello.f90",
		"/home/ctong/Desktop/Linux Programming/C/mystrlen.c",
		"/home/ctong/Desktop/Linux Programming/C++/PrivateTest.cpp",
		"/home/ctong/Desktop/Linux Programming/C++/main.cpp",
		"/home/ctong/Desktop/Linux Programming/C++/templatevector.h",
		"/home/ctong/Desktop/Linux Programming/C/monthname.c",
		"/home/ctong/Desktop/Linux Programming/C/broken.c",
		"/home/ctong/Desktop/Linux Programming/Java/Marathon/Marathon.java",
		"/home/ctong/Desktop/Linux Programming/Java/Marathon/Runner.java",
		"/home/ctong/Desktop/Linux Programming/Java/Database/Database.java",
		"/home/ctong/Desktop/Linux Programming/Java/Database/Person.java",
		"/home/ctong/Desktop/Linux Programming/Java/StringEquals.java",
		"/home/ctong/Desktop/Linux Programming/Java/test.java",
		"/home/ctong/Desktop/Linux Programming/Java/Subject17.java",
		"/home/ctong/Desktop/Linux Programming/Java/Encrypt.java",
		"/home/ctong/Desktop/Linux Programming/Java/FooCorp.java",
		"/home/ctong/Desktop/Linux Programming/Java/Greetings.java",
		"/home/ctong/Desktop/Linux Programming/Java/JOptionPane_Test.java",
		"/home/ctong/Desktop/Linux Programming/Java/Line.java",
		"/home/ctong/Desktop/Linux Programming/Java/P1A.java",
		"/home/ctong/Desktop/Linux Programming/Java/P1B.java",
		"/home/ctong/Desktop/Linux Programming/Java/P1C.java",
		"/home/ctong/Desktop/Linux Programming/Java/P1D.java",
		"/home/ctong/Desktop/Linux Programming/C++/ctof.cpp",
		"/home/ctong/Desktop/Linux Programming/C++/ftoc.cpp",
		"/home/ctong/Desktop/Linux Programming/C++/Encrypt.cpp",
		"/home/ctong/Desktop/Linux Programming/C++/Greetings.cpp"
	],
	"find":
	{
		"height": 35.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"keyboard_us_shift",
			"keyboard_usshifted",
			"kbdus",
			"att",
			", ",
			"editor",
			"i",
			"getchar",
			"(furthest_writable - csr_y * VGA_WIDTH - csr_x)",
			"length_to_copy",
			"length_to_move",
			"textmemptr",
			"if",
			"name",
			"names",
			"nameslength",
			"time",
			"screen_",
			"textmemptr",
			"screen",
			"';\n",
			"}",
			"screen_data",
			"csr_x",
			"writable_index",
			"getline",
			"64",
			"I",
			"i",
			"command_parser",
			"exit",
			"char",
			"command_line",
			"25",
			"80",
			"csr",
			"int",
			"nDone",
			"opcode",
			"$",
			"stublet",
			"sublet",
			"SUBLET",
			"isalpha",
			"from",
			"to",
			"s2",
			"s1",
			"writable",
			"cannot_write",
			"writable",
			";\n",
			"stublet",
			"loop",
			"(int)",
			"int",
			"gdtflush",
			"faulthandler",
			"gdtload",
			"idtload",
			"void",
			"flush",
			"global",
			"extern ",
			");\n",
			"outb",
			"h",
			" #",
			"()\n",
			"isrcommonstub",
			"; ",
			"idt_load",
			"extern ",
			"size_t",
			"mystrlen",
			"extern",
			"threshold",
			"label_bully",
			"bxtch",
			"bitch",
			"bxtch",
			"039",
			"i love you too ",
			"<FORM",
			"<ANSWER>Yes",
			"<ANSWER>Yes\\",
			"<ANSWER>Yes",
			"Yes",
			"  ",
			"&amp",
			"&akmp",
			"#039",
			"quot",
			"<FORMSPRINGID>",
			"<answer>Yes",
			"	<POST>\n		<TEXT>Q: Bitch u thee bomb like Tick TICK!&lt;br&gt;A: Hahah(: Thanks!</TEXT>\n		<ASKER></ASKER>\n		<LABELDATA>\n			<ANSWER>No</ANSWER>\n			<CYBERBULLYWORD>n/a</CYBERBULLYWORD>\n			<SEVERITY>0</SEVERITY>\n			<OTHER></OTHER>\n			<WORKTIME>13</WORKTIME>\n			<WORKERID>A3VRAAN0NI2SLW</WORKERID>\n		</LABELDATA>\n		<LABELDATA>\n			<ANSWER>No</ANSWER>\n			<CYBERBULLYWORD>n/a</CYBERBULLYWORD>\n			<SEVERITY>0</SEVERITY>\n			<OTHER></OTHER>\n			<WORKTIME>10</WORKTIME>\n			<WORKERID>AJY2MZ3B4KW2G</WORKERID>\n		</LABELDATA>\n		<LABELDATA>\n			<ANSWER>Yes</ANSWER>\n			<CYBERBULLYWORD>Bitch u thee bomb like Tick TICK</CYBERBULLYWORD>\n			<SEVERITY>9</SEVERITY>\n			<OTHER></OTHER>\n			<WORKTIME>129</WORKTIME>\n			<WORKERID>A1ZGYK5RA367YL</WORKERID>\n		</LABELDATA>\n	</POST>",
			"YES",
			"FORMSPRING",
			"features",
			"message_feature_extractor",
			"... ",
			">>> ",
			"feature_set",
			"Q: your thoughts on 2012? I think it&#039;ll be an alein invasion.<br>A: we will wake up to blue skys and keep on going on",
			"to",
			"\\u2019",
			"funny",
			"feel anything anymore  so don&#039;t ask me whatever the fuck you want.",
			"I don&#039;t feel anything anymore  so don&#039;t ask me whatever the fuck you want.",
			"BIO",
			"_worker",
			"contains_worker",
			"findMin_worker",
			");\n",
			";\n",
			"Cop",
			"theSize",
			"unsigned int",
			"void *address",
			"gcf",
			"numerator()",
			"denominator()",
			"getDenominator",
			"getNumerator",
			"Numerator",
			".denominator",
			".numerator",
			"rat("
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"keyboard_us_shifted",
			"keyboard_us_shift",
			"keyboard_us",
			"length_to_copy",
			"// screen_data",
			"last_writable",
			"MAX_CMD_LENGTH",
			"VGA_HEIGHT",
			"VGA_WIDTH",
			"src",
			"dest",
			"p2",
			"p1",
			"writable",
			"cannot_write",
			"gdt_flush",
			"fault_handler",
			"gdt_load",
			"idt_load",
			"extern void",
			".global",
			"",
			"outportb",
			"isr_common_stub",
			"",
			"int /*size_t*/",
			"int",
			"strlen",
			"label_posts",
			"",
			"labeled_messages",
			"",
			"contains",
			"findMin",
			"thesize",
			"int",
			"T *address",
			"euclid",
			"getNumerator()",
			"getDenominator()",
			"getDenominator",
			"denominator",
			"numerator",
			"Denominator",
			".getDenominator()",
			".getNumerator()",
			"result(",
			"return result",
			"result.",
			"result",
			"r1.",
			"r2.",
			"const Rational &r1, const Rational &r2",
			"rat.simplify()",
			"rat.checkDenominator();",
			"this->checkDenominator();",
			"r.",
			"this->",
			"r.",
			"display()",
			"long double",
			"origIndex",
			"origRadicand",
			"this->radicand",
			"this->index",
			"width",
			"std::string",
			"std::endl",
			"std::cin",
			"std::cout",
			"size",
			"std::endl",
			"std::cout",
			"double",
			"intbits",
			"unsigned int length",
			"unsigned int start",
			"*(result+i)",
			"string[i]",
			"day",
			"day2",
			"isprime",
			"*(primes+i)",
			"(double *)",
			"primes",
			"int",
			"unsigned long long int",
			"*(primes+i)",
			"sum",
			"getage",
			"numbers",
			"    ",
			"double",
			"std::cin",
			"std::cout",
			"Time",
			"Runner",
			"names",
			"*(argv[]+tcount)",
			""
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 14,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "Makefile",
					"settings":
					{
						"buffer_size": 937,
						"regions":
						{
						},
						"selection":
						[
							[
								395,
								395
							]
						],
						"settings":
						{
							"syntax": "Packages/Makefile/Makefile.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "loader.s",
					"settings":
					{
						"buffer_size": 8677,
						"regions":
						{
						},
						"selection":
						[
							[
								604,
								604
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "kmain.c",
					"settings":
					{
						"buffer_size": 600,
						"regions":
						{
						},
						"selection":
						[
							[
								361,
								361
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "terminal.c",
					"settings":
					{
						"buffer_size": 10079,
						"regions":
						{
						},
						"selection":
						[
							[
								4781,
								4781
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2783.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "edit.c",
					"settings":
					{
						"buffer_size": 598,
						"regions":
						{
						},
						"selection":
						[
							[
								63,
								63
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "utilities.c",
					"settings":
					{
						"buffer_size": 4029,
						"regions":
						{
						},
						"selection":
						[
							[
								3892,
								3892
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3434.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "timer.c",
					"settings":
					{
						"buffer_size": 1729,
						"regions":
						{
						},
						"selection":
						[
							[
								749,
								749
							]
						],
						"settings":
						{
							"auto_name": "#include < system.h >",
							"syntax": "Packages/C++/C.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "gdt.c",
					"settings":
					{
						"buffer_size": 2700,
						"regions":
						{
						},
						"selection":
						[
							[
								2012,
								2012
							]
						],
						"settings":
						{
							"auto_name": "/* Defines a GDT entry. We say packed, because it",
							"syntax": "Packages/C++/C.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 588.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "irq.c",
					"settings":
					{
						"buffer_size": 3919,
						"regions":
						{
						},
						"selection":
						[
							[
								945,
								945
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "isrs.c",
					"settings":
					{
						"buffer_size": 4653,
						"regions":
						{
						},
						"selection":
						[
							[
								855,
								855
							]
						],
						"settings":
						{
							"auto_name": "#include \"system.h\"",
							"syntax": "Packages/C++/C.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 469.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "serial.c",
					"settings":
					{
						"buffer_size": 2829,
						"regions":
						{
						},
						"selection":
						[
							[
								2178,
								2178
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1607.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 11,
					"file": "system.c",
					"settings":
					{
						"buffer_size": 564,
						"regions":
						{
						},
						"selection":
						[
							[
								63,
								63
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 12,
					"file": "system.h",
					"settings":
					{
						"buffer_size": 4516,
						"regions":
						{
						},
						"selection":
						[
							[
								4236,
								4236
							]
						],
						"settings":
						{
							"auto_name": "#ifndef __SYSTEM_H",
							"syntax": "Packages/C++/C++.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 2316.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 13,
					"file": "scrn.c",
					"settings":
					{
						"buffer_size": 10101,
						"regions":
						{
						},
						"selection":
						[
							[
								3778,
								3778
							]
						],
						"settings":
						{
							"auto_name": "",
							"syntax": "Packages/C++/C.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2727.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 14,
					"file": "kb.c",
					"settings":
					{
						"buffer_size": 7031,
						"regions":
						{
						},
						"selection":
						[
							[
								956,
								956
							]
						],
						"settings":
						{
							"auto_name": "/* KBDUS means US Keyboard Layout. This is a scanc",
							"syntax": "Packages/C++/C.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 486.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 15,
					"file": "link.ld",
					"settings":
					{
						"buffer_size": 352,
						"regions":
						{
						},
						"selection":
						[
							[
								352,
								352
							]
						],
						"settings":
						{
							"auto_name": "OUTPUT_FORMAT(\"binary\")",
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 16,
					"file": "idt.c",
					"settings":
					{
						"buffer_size": 2249,
						"regions":
						{
						},
						"selection":
						[
							[
								161,
								161
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 0.0
	},
	"input":
	{
		"height": 33.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 118.0
	},
	"output.unsaved_changes":
	{
		"height": 28.0
	},
	"replace":
	{
		"height": 64.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 259.0,
	"status_bar_visible": true
}
